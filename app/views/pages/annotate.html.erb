<header class="jumbotron subhead" id="overview">
	<h1>Annotate <small>(Work in Progress)</small></h1>
	<p class="lead">We are working on an easier and more convenient way to annotate. Please come back again!</p>
	<p>
		<% if signed_in? %>
			<h3>Hi <%= current_user.username %>,</h3>
		<% end %>
		<!-- You're looking at <strong><%= @current_key %></strong><br> -->
		You're looking at <strong><%= session[:current_cite].cite_key %></strong><br>
	</p>
</header>

<div class="row">
	<div class="span4">
		<h3>Citing Paper / Context <small>(See <%= link_to "#{@current_key.split("==>")[0]}.pdf", Citees.citing_pdf_link(@current_key), :target => "_blank" %>)</small></h3>
		<div class="well">
			<%= Citees.citing(@current_key) %>
		</div>
	</div>
	
	<div class="span8">
		<h3>Cited Paper <small>(See <%= link_to "#{@current_key.split("==>")[1]}.pdf", Citees.cited_pdf_link(@current_key), :target => "_blank" %>)</small></h3>
		<%= form_tag(annotate_submit_path, :id => "cited", :class => "well") do %>
			<p>
				<%= label_tag("Choose the type of the citation:")%>
				<%= radio_button("type", "choice", "General", :onClick => "clickDisable()") %> General [<a href="#" rel="tooltip" data-original-title="The citing paper refers to the cited paper as a whole, not specifically referring to a particular section.">?</a>]
				<%= radio_button("type", "choice", "Specific", :onClick => "clickEnable()") %> Specific [<a href="#" rel="tooltip" data-original-title="The citing paper refers a specific/particular line or section of the cited paper.">?</a>]
				<%= radio_button("type", "choice", "Undetermined", :onClick => "clickDisable()") %> Undetermined [<a href="#" rel="tooltip" data-original-title="When there is not enough information to determine the type of citation.">?</a>]
			</p>
			<a href="#" rel="popover" data-content="To annotate, simply read the context on the left, and then click and select the lines in this cited paper that you think is the referred information." data-original-title="">How do I annotate?</a>
			(Scroll and read this cited paper for the cited information)
			<div id='hiddenText' class='alert alert-success'>
				<strong>You have selected General or Undetermined, the cited paper is now disabled from selections</strong>
			</div>
			<div id="citedPaper" style="position:relative; 
			 left:0px;
			 top:0px;
			 width:100%;
			 height:300px;
			 background-color:#ffffff;
			 overflow:auto;">
			<%= Citees.cited(@current_key) %>
			</div>
			<br>
			<% if session[:annotate_error] %>
				<%= session[:annotate_error] %>
			<% end %>
			<%= submit_tag("Submit Annotations", :id => "btnSubmit", :class => "btn btn-primary") %>
		<% end %>
	</div>
</div>

<script>
document.getElementById('hiddenText').hidden = true
content_holder = document.getElementById('citedPaper');
for(var i=0;i<content_holder.children.length;i++) {
	(function() {
		var d = content_holder.children[i];

		d.input_field = document.createElement("input");
		d.input_field.value = 'y'
		d.input_field.name = 'selection['+(i+1)+']';
		d.input_field.type = 'hidden';

		d.selected = false;
		d.onclick = function() {
			if (d.disabled) return;
			d.selected = !d.selected;
			if(d.selected){
				d.style.backgroundColor = '#FFFFAA';
				d.appendChild(d.input_field);
			}
			else {
				d.style.backgroundColor = '#FFFFFF'
				d.removeChild(d.input_field);
			}
		}
	})();
}

function clickDisable() {
	content_holder = document.getElementById('citedPaper')
	// content_holder.style['overflow'] = "hidden"
	// content_holder.style['backgroundColor'] = "#CCCCCC"
	document.getElementById('hiddenText').hidden = false
	toggleDisabled(content_holder);
}

function clickEnable() {
	content_holder = document.getElementById('citedPaper')
	// content_holder.style['overflow'] = "auto"
	// content_holder.style['backgroundColor'] = "#FFFFFF"
	document.getElementById('hiddenText').hidden = true
	toggleEnabled(content_holder);
}

function toggleEnabled(el) {
	try {
		el.disabled = false
	}
	catch(E){
		alert("Error!")
	}
	if (el.childNodes && el.childNodes.length > 0) {
		for (var x = 0; x < el.childNodes.length; x++) {
			toggleEnabled(el.childNodes[x]);
		}
	}
}

function toggleDisabled(el) {
	try {
		el.disabled = true
	}
	catch(E){
		alert("Error!")
	}
	if (el.childNodes && el.childNodes.length > 0) {
		for (var x = 0; x < el.childNodes.length; x++) {
			toggleDisabled(el.childNodes[x]);
		}
	}
}
</script>